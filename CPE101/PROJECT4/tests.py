 
#Project 4
#Raymond Lenz and Jonathan Wallach
#Instructor: Sussan Einakian 
#Section: 9
import unittest
import func_calcudoku as f

class TestString(unittest.TestCase):
   def test_validate_rows(self):
      self.assertTrue(f.validate_rows([[1,2,3,4,5],[2,3,4,5,1],[3,4,5,1,2],[4,5,1,2,3],[5,1,2,3,4]]))
      self.assertFalse(f.validate_rows([[1,2,4,4,5],[2,3,4,5,1],[3,4,5,1,2],[4,5,1,2,3],[5,1,2,3,4]]))
      self.assertFalse(f.validate_rows([[1,1,1,1,1],[2,3,4,5,1],[3,4,5,1,2],[4,5,1,2,3],[5,1,2,3,4]]))
   pass
   def test_validate_cols(self):
      self.assertTrue(f.validate_cols([[1,2,3,4,5],[2,3,4,5,1],[3,4,5,1,2],[4,5,1,2,3],[5,1,2,3,4]]))
      self.assertFalse(f.validate_cols([[1,2,4,4,5],[2,3,4,5,1],[3,4,5,1,2],[4,5,1,2,3],[5,1,2,3,4]]))
      self.assertFalse(f.validate_cols([[1,1,1,1,1],[2,3,4,5,1],[3,4,5,1,2],[4,5,1,2,3],[5,1,2,3,4]]))
   pass
   def test_validate_all(self):
      self.assertTrue(f.validate_all([[3, 5, 2, 1, 4],[5, 1, 3, 4, 2],[2, 4, 1, 5, 3],[1, 2, 4,3, 5],[4, 3, 5, 2, 1]],[[9,0,5,6],[7, 1, 2],[10, 3, 8, 13],[14, 4, 9, 14, 19],[3, 7],[8, 10, 11, 16],[13, 12, 17, 21, 22],[5,15, 20],[6, 18, 23, 24]]))
      self.assertFalse(f.validate_all([[3, 5, 2, 1, 4],[5, 1, 3, 4, 2],[2, 4, 1, 5, 3],[1, 2, 4,3, 5],[4, 3, 5, 2, 1]],[[9,1,5,6],[7, 1, 2],[10, 3, 8, 13],[14, 4, 9, 14, 19],[3, 7],[8, 10, 11, 16],[13, 12, 17, 21, 22],[5,15, 20],[6, 18, 23, 24]]))
      self.assertFalse(f.validate_all([[4,3,2,1,5],[5, 1, 3, 4, 2],[2, 4, 1, 5, 3],[1, 2, 4,3, 5],[4, 3, 5, 2, 1]],[[9,0,5,6],[7, 1, 2],[10, 3, 9, 13],[14, 4, 8, 14, 19],[3, 7],[8, 10, 11, 16],[13, 12, 17, 21, 22],[5,15, 20],[6, 18, 23, 24]]))
   pass
   def test_validate_cages(self):
      self.assertTrue(f.validate_cages([[3, 5, 2, 1, 4],[5, 1, 3, 4, 2],[2, 4, 1, 5, 3],[1, 2, 4,3, 5],[4, 3, 5, 2, 1]],[[9,0,5,6],[7, 1, 2],[10, 3, 8, 13],[14, 4, 9, 14, 19],[3, 7],[8, 10, 11, 16],[13, 12, 17, 21, 22],[5,15, 20],[6, 18, 23, 24]]))
      self.assertTrue(f.validate_cages([[5, 1, 3, 4, 2],[1, 1, 1, 1, 1],[2, 4, 1, 5, 3],[1, 2, 4,3, 5],[4, 3, 5, 2, 1]],[[9,0,5,6],[7, 1, 2],[10, 3, 8, 13],[14, 4, 9, 14, 19],[3, 7],[8, 10, 11, 16],[13, 12, 17, 21, 22],[5,15, 20],[6, 18, 23, 24]]))
      self.assertFalse(f.validate_cages([[4,3,2,1,5],[5, 1, 3, 4, 2],[2, 4, 1, 5, 3],[1, 2, 4,3, 5],[4, 3, 5, 2, 1]],[[9,0,5,6],[7, 1, 2],[10, 3, 9, 13],[14, 4, 8, 14, 19],[3, 7],[8, 10, 11, 16],[13, 12, 17, 21, 22],[5,15, 20],[6, 18, 23, 24]]))
   pass
   def test_ensure_filled(self):
      self.assertTrue(f.ensure_filled([[3, 5, 2, 1, 4],[5, 1, 3, 4, 2],[2, 4, 1, 5, 3],[1, 2, 4,3, 5],[4, 3, 5, 2, 1]]))
      self.assertFalse(f.ensure_filled([[3, 5, 0, 0, 0],[5, 1, 0, 4, 2],[2, 4, 1, 5, 3],[1, 2, 4,3, 5],[4, 3, 5, 2, 1]]))
      self.assertTrue(f.ensure_filled([[1, 2, 3, 4, 5],[5, 5, 3, 4, 2],[2, 2, 2, 5, 3],[1, 2, 4,3, 5],[4, 3, 5, 2, 1]]))

   pass
   
if __name__ == '__main__':
   unittest.main()

