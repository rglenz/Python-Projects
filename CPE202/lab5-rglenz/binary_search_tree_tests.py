import unittest
from binary_search_tree import *

class TestLab4(unittest.TestCase):

    def test_simple(self):
        bst = BinarySearchTree()
        self.assertEqual(bst.find_max(),None)
        self.assertEqual(bst.find_min(),None)
        self.assertEqual(bst.level_order_list(), [])
        self.assertEqual(bst.inorder_list(), [])
        self.assertEqual(bst.preorder_list(), [])
        self.assertEqual(bst.tree_height(), None)
        self.assertTrue(bst.is_empty())
        bst.insert(10, 'stuff')
        self.assertEqual(bst.level_order_list(), [10])
        self.assertEqual(bst.inorder_list(), [10])
        self.assertEqual(bst.preorder_list(), [10])
        self.assertEqual(bst.tree_height(), 0)
        self.assertTrue(bst.search(10))
        self.assertEqual(bst.find_min(), (10, 'stuff'))
        bst.insert(10, 'other')
        self.assertEqual(bst.find_max(), (10, 'other'))
        self.assertEqual(bst.tree_height(), 0)
        self.assertEqual(bst.inorder_list(), [10])
        self.assertEqual(bst.preorder_list(), [10])
        self.assertEqual(bst.level_order_list(), [10])
        bst.insert(11, 'stuff')
        bst.insert(9, 'stuff')
        self.assertEqual(bst.level_order_list(), [10,9,11])
        self.assertEqual(bst.inorder_list(), [9,10,11])
        self.assertEqual(bst.preorder_list(), [10,9,11])
        self.assertEqual(bst.tree_height(), 1)
        bst.insert(8, 'stuff')
        self.assertEqual(bst.tree_height(), 2)
    def test_01(self):
        bst = BinarySearchTree()
        self.assertFalse(bst.search(200))
        bst.insert(10, 'stuff')
        bst.insert(11, 'stuff1')
        bst.insert(9, 'stuff')
        bst.insert(1, 'stuff')
        bst.insert(2, 'stuff')
        bst.insert(3, 'stuff')
        self.assertEqual(bst.tree_height(), 4)
        self.assertEqual(bst.level_order_list(), [10,9,11,1,2,3])
        self.assertEqual(bst.inorder_list(), [1,2,3,9,10,11])
        self.assertEqual(bst.preorder_list(), [10,9,1,2,3,11])
        self.assertEqual(bst.find_max(), (11, 'stuff1'))
        bst.insert(12, 'other')
        self.assertEqual(bst.find_max(), (12, 'other'))
        bst.insert(56, '')
        self.assertEqual(bst.level_order_list(), [10,9,11,1,12,2,56,3])
        self.assertEqual(bst.inorder_list(), [1,2,3,9,10,11,12,56])
        self.assertEqual(bst.preorder_list(), [10,9,1,2,3,11,12,56])
        self.assertEqual(bst.tree_height(), 4)
        self.assertTrue(bst.search(3))
        self.assertTrue(bst.search(12))
        self.assertTrue(bst.search(9))
        self.assertTrue(bst.search(1))
        self.assertFalse(bst.search(30))
        self.assertFalse(bst.search(200))
        self.assertEqual(bst.find_min(), (1, 'stuff'))
    def test_02(self):
        bst = BinarySearchTree()
        self.assertFalse(bst.search(200))
        bst.insert('c', 'stuff')
        bst.insert('b', 'stuff1')
        bst.insert('a', 'stuff')
        bst.insert('d', 'stuff')
        self.assertEqual(bst.tree_height(), 2)
        self.assertEqual(bst.level_order_list(), ['c','b','d','a'])
        self.assertEqual(bst.inorder_list(), ['a','b','c','d'])
        self.assertEqual(bst.preorder_list(), ['c','b','a','d'])
        

if __name__ == '__main__': 
    unittest.main()
